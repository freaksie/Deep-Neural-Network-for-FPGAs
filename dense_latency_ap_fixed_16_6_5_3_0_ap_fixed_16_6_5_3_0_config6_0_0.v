// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_0_0 (
        ap_clk,
        ap_rst,
        data_0_V_read,
        data_1_V_read,
        data_2_V_read,
        data_3_V_read,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
localparam DS = 15;
localparam MS = 25;
input  [DS:0] data_0_V_read;
input  [DS:0] data_1_V_read;
input  [DS:0] data_2_V_read;
input  [DS:0] data_3_V_read;
output  [DS:0] ap_return;
input   ap_ce;

reg[DS:0] ap_return;

reg   [DS:0] tmp_5_reg_247;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [DS:0] tmp_5_1_reg_252;
reg   [DS:0] tmp_5_2_reg_257;
reg   [DS:0] tmp_5_3_reg_262;
wire  signed [DS:0] r_V_6_2_fu_70_p0;
wire    ap_block_pp0_stage0;
wire  signed [DS:0] r_V_6_fu_71_p0;
wire  signed [DS:0] r_V_6_3_fu_72_p0;
wire  signed [DS:0] r_V_6_1_fu_73_p0;
wire   [MS:0] r_V_6_fu_71_p2;
wire   [MS:0] r_V_6_1_fu_73_p2;
wire   [MS:0] r_V_6_2_fu_70_p2;
wire   [MS:0] r_V_6_3_fu_72_p2;
wire   [DS:0] tmp2_fu_231_p2;
wire   [DS:0] tmp1_fu_236_p2;
wire   [DS:0] tmp_fu_227_p2;
wire   [DS:0] res_V_write_assign_fu_241_p2;
reg    ap_ce_reg;
reg   [DS:0] ap_return_int_reg;


reg signed [DS:0] w0;
reg signed[DS:0] w1;
reg signed [DS:0] w2;
reg signed [DS:0] w3;
reg signed [DS:0] b;

initial begin
w0=64822;
w1=65139;
w2=911;
w3=64698;
b =333;
end 

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= res_V_write_assign_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1))) begin
        tmp_5_1_reg_252 <= {{r_V_6_1_fu_73_p2[MS:MS-DS]}};
        tmp_5_2_reg_257 <= {{r_V_6_2_fu_70_p2[MS:MS-DS]}};
        tmp_5_3_reg_262 <= {{r_V_6_3_fu_72_p2[MS:MS-DS]}};
        tmp_5_reg_247 <= {{r_V_6_fu_71_p2[MS:MS-DS]}};
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = res_V_write_assign_fu_241_p2;
    end
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign r_V_6_1_fu_73_p0 = data_1_V_read;

assign r_V_6_1_fu_73_p2 = ($signed(r_V_6_1_fu_73_p0) * $signed(w1));

assign r_V_6_2_fu_70_p0 = data_2_V_read;

assign r_V_6_2_fu_70_p2 = ($signed(r_V_6_2_fu_70_p0) * $signed(w2));

assign r_V_6_3_fu_72_p0 = data_3_V_read;

assign r_V_6_3_fu_72_p2 = ($signed(r_V_6_3_fu_72_p0) * $signed(w3));

assign r_V_6_fu_71_p0 = data_0_V_read;

assign r_V_6_fu_71_p2 = ($signed(r_V_6_fu_71_p0) * $signed(w0));

assign res_V_write_assign_fu_241_p2 = (tmp1_fu_236_p2 + tmp_fu_227_p2);

assign tmp1_fu_236_p2 = (tmp2_fu_231_p2 + tmp_5_2_reg_257);

assign tmp2_fu_231_p2 = (tmp_5_3_reg_262 + b);

assign tmp_fu_227_p2 = (tmp_5_reg_247 + tmp_5_1_reg_252);

endmodule //dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_0_0